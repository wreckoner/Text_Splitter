#!/usr/bin/env python
"""Subclass of main_frame, which is generated by wxFormBuilder."""

import wxPythonXtras, frames, os, threading, app_methods, thread
import about_frame_child
from methods import file
from methods.file import Get_File_Size

# Implementing main_frame
class main_frame_child( frames.main_frame ):
	def __init__( self, parent ):
		frames.main_frame.__init__( self, parent )
		self.Center()
		self.Show()
		self.init_variables()
	
	def init_variables(self):
		self.mode = 0				# Splitting Mode
		self.input_file = ''		# Input File
		self.output_folder = ''		# Output Folder
		self.num = 1				# Splitting Parameter
		self.line_counter = False	# Set up a dummy line_counter object
	
	# Handlers for main_frame events.
	def OnSplit( self, event ):
		self.output_folder = self.output_folder_box.GetValue()
		self.input_file = self.file_box.GetValue()
		self.num = self.spinCtrl_divisionParameter.GetValue()
		self.mode = self.radioBox_divideoption.GetSelection()
		if os.path.isfile(self.input_file) and os.path.isdir(self.output_folder):
			# Checks to see if the input file and output folder are valid parameters
			threading.Thread(target = file.Split_File, args = (self.input_file, self.output_folder, self.mode, self.num, self.text_display, self.progress_bar, self.split_button)).start()
		else:
			pass
	
	def OnOpenFile( self, event ):
		try:
			filename = wxPythonXtras.OnOpenFile(self)
			self.file_box.SetLabel(filename)
			self.file_size_diplay.SetLabel(str(Get_File_Size(filename)))
			# Abort any previous counter thread and start a new one.
			if self.line_counter: self.line_counter.abort()
			self.line_counter = file.line_counter(self.lines_label, filename, self.animCtrl_scanner).start()
			#self.line_counter.start()
			thread.start_new_thread( app_methods.FilePreview, (self.text_display, filename))
		except Exception:
			pass
		
	def OnOutputFolderSelect(self, event):
		try:
			self.output_folder_box.SetLabel(wxPythonXtras.OnSelectFolder(self))
		except Exception:
			pass
	
	def on_divide_mode_select(self, event):
		if self.radioBox_divideoption.GetSelection() == 1:
			self.staticText_linesperfile.Show()
			self.staticText_numberofparts.Hide()
			self.panel.Layout()
		elif self.radioBox_divideoption.GetSelection() == 0:
			self.staticText_linesperfile.Hide()
			self.staticText_numberofparts.Show()
			self.panel.Layout()
			
	def on_spinCtrl_edit(self, event):
		value = self.spinCtrl_divisionParameter.GetValue()
		_max = self.spinCtrl_divisionParameter.GetMax()
		self.spinCtrl_divisionParameter.SetValue(value if value < _max else _max)
			
	def OnExit(self, event):
		self.DestroyChildren()
		self.Destroy()
	
	def OnAbout( self, event ):
		self.Disable()
		about_frame_child.about_frame_child(self)
		
	
	
